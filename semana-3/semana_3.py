# -*- coding: utf-8 -*-
"""Semana-3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OYQMMaXU-wx0YAYKQ3gfYxLU48tIIWPQ

Calculadora
Você pode utilizar o Python como uma grande calculadora:
"""

6 + 3
6 - 3
6 * 3
6 / 3

"""Podemos salvar as contas que fazemos em objetos que serão chamados de variáveis:"""

a = 6 + 3
b = 6 - 3
c = 6 * 3
d = 6 / 3

print(a)
print(b)

print(a + b)
print(3 * b)
print(3 * a + 2 * b + 5 * c + 4 * d)

"""Tipos
Numéricos
Quando tratamos de números no Python, internamente a máquina pode entendê-los de duas formas:

float: Formato numérico com casas decimais. Ex.: 1 é entendido pelo computador como 1.00000000...;

int: Formato numérico sem casas decimais (inteiros). Ex.: 3.145 é entendido pelo computador como 3.

O Python utiliza o padrão numérico estadunidense onde o símbolo para separar a parte inteira da decimal de um número é o ponto
⋅
 (diferente do padrão brasileiro que utiliza vírgula)
"""

a = float(22/5)
b = int(4.5)
c = int(3.9)

print(a)
print(b)
print(c)

"""Alfanuméricos
O Python é muito poderoso e consegue lidar com outros tipos de dados além dos números. Temos disponíveis operadores booleanos. Os valores do tipo bool podem representar dois valores completamente distintos: True (igual ao int 1) e False (igual ao int 0) para, respectivamente, verdadeiro e falso:
"""

operador_bool_verdadeiro = True
operador_bool_falso = False

"""Operador	Conceito	Exemplo
==	Igual	5 == (10 / 2)
!=	Diferente	1 != 0
>	Maior	3 > 1
>=	Maior ou igual	6 >= 4
<	Menor	5 < 2
<=	Menor ou igual	2 <= 3
"""

a = 3
b = 5

print(a > b)
print(a == (b - 2))
print((a * 5) != (b * 3))

string_aspas_simples = 'ciencia de dados'
string_aspas_duplas = "ciencia de dados"

print(string_aspas_simples)
print(string_aspas_duplas)

nome = 'Dino'
sobrenome = "da Silva Sauro"
idade = 43

print(f"Nome completo: {nome} {sobrenome}. Idade: {idade}")

"""Documentação
Fazemos a documentação diretamente no código utilizando comentários. Assim, nosso código fica mais legível para outros humanos. Além disso, os comentários também são úteis para fazer com que o computador não leia determinado bloco durante um teste, por exemplo. Em Python, os comentários são simbolizados pelo símbolo
#
 e se estende até o fim de cada linha. Vamos documentar os blocos anteriores:
"""

# Nome do cliente
nome = 'Dino'

# Sobrenome do cliente
sobrenome = "da Silva Sauro"

# Idade do cliente
idade = 43       # valor numerico

# Imprimindo um texto na tela
print(f"Nome completo: {nome} {sobrenome}. Idade: {idade}")

"""Funções
Uma função é uma regra que recebe entradas (que são chamadas de argumentos) e retorna uma saída correspondente. Embora não tenhamos mencionado, mas já utilizamos duas funções, são elas print e type. Mas podemos definir novas funções em Python usando def:
"""

# Funcao que calcula o dobro de um numero
def dobro(x):
    """Insira aqui um texto documental (opcional) que
    explique o que a funcao faz. Por exemplo, esta funcao multiplica sua
    entrada por 2.
    """
    return x * 2

# Testando a nova funcao
print(dobro(5))
print(dobro(-5))
print(dobro(.5))

# Funcao que calcula o salario anual
def salario_anual(salario_mensal):
    """Funcao que calcula o salario anual
    (considerando o 13o salario)
    """
    return print(f"O salario anual e de R$ {salario_mensal * 13}")

# Teste
salario_anual(2500)

# Funcao que escreve o nome completo do cliente
def nome_completo(nome = "Nome", sobrenome = "Sobrenome"):
    return nome + " " + sobrenome

# Testes
print(nome_completo('Dino', 'da Silva Sauro')) # 'Dino da Silva Sauro'

print(nome_completo(sobrenome = 'da Silva Sauro',
              nome = 'Dino')) # 'Dino da Silva Sauro'

print(nome_completo('Dino')) # "Dino Sobrenome

print(nome_completo(sobrenome = 'da Silva Sauro')) # "Nome da Silva Sauro"

########## Exemplo (Nao rode) !!!!!!
if 1 > 2:
    # Se 1 e maior que 2, faca...
elif 1 > 3:
    # 'elif' significa 'else if' (senao se...) [opcional]
    # Se 1 e maior que 3, faca ...
else:
   # Caso todas as condicoes sejam falsas, faca... (opcional)

# Funcao que calcula o salario anual
def salario_anual(salario_mensal):
    """Funcao que calcula o salario anual
    (considerando o 13o salario)
    """
    if salario_mensal > 0:
        resultado = f"O salario anual e de R$ {salario_mensal * 13}"
    else:
        resultado = "O salario deve ser um valor positivo"

    return print(resultado)

# Teste
salario_anual(-2500)
salario_anual(2500)

# range(k) e uma funcao que cria uma sequencia de 0 ate (k - 1).
# Exemplo: range(10) sera a sequencia 0, 1, 2, ..., 9

for x in range(10):
    print(x + " e menor do que 10")

"""Listas
Provavelmente, a estrutura de dados mais fundamental do Python é a lista, que é simplesmente uma coleção ordenada (é semelhante ao que em outras linguagens pode ser chamado de array, mas com algumas funcionalidades adicionais):
"""

lista_numeros = [1, 2, 3]    # somente numeros (floats)

lista_mista = ["string", 0.1, True]  # string, float, bool

# combinando as 2 listas anteriores com uma vazia
lista_de_listas = [lista_numeros, lista_mista, []]

comprimento_lista = len(lista_numeros)  # 3 elementos

soma_lista = sum(lista_numeros)  # 6 (soma dos elementos numericos)

"""Você pode obter ou definir o
n
-ésimo elemento de uma lista com colchetes:
"""

x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

zero = x[0]   # primeiro elemento de x - listas comecam com indice zero!

um  = x[1]    # segundo elemento de x

nove = x[-1]  # ultimo elemento de x

oito = x[-2]  # penultimo elemento de x

x[0] = -1     # agora x e [-1, 1, 2, 3, ..., 9]

""" linguagem Python inicia seu contador em ZERO!

Por exemplo, o primeiro elemento de uma lista tem índice 0. De forma semelhante, o décimo elemento tem índice 9.

Você também pode usar colchetes para fatiar listas. A fatia i:j significa todos os elementos de i (inclusivo) a j (exclusivo).
"""

primeiros_tres = x[:3]              # [-1, 1, 2]

quarto_em_diante = x[3:]            # [3, 4, ..., 9]

segundo_ate_quinto = x[1:5]         # [1, 2, 3, 4]

ultimos_tres = x[-3:]               # [7, 8, 9]

sem_primeiro_e_ultimo = x[1:-1]     # [1, 2, ..., 8]

copia_de_x = x[:]                   # [-1, 1, 2, ..., 9]

"""Dispomos também do operador in para verificar se determinado elemento pertence à uma lista:"""

print(1 in [1, 2, 3]) # True

print(0 in [1, 2, 3]) # False

"""Retornando a parte de nossa base de dados de clientes, podemos iterar sobre a lista de nome dos clientes:"""

# Lista de clientes
clientes = ["Nero", "Atum", "Bois", "Alvares"]

# Iterando ID e nome dos clientes
for id, nome in enumerate(clientes):
    print(f"O id {id} pertence ao cliente {nome}")

"""Programação Orientada à Objetos
A linguagem Python permite que você defina classes que encapsulam dados e funções que operam dentro delas. Tais funções são conhecidas como métodos. Usualmente, não iremos criar novas classes durante o curso (mas você pode). Iremos estudar os métodos das principais classes (ou como chamamos previamente, "tipos").

Os métodos são acessados através de um ponto
⋅
 após o nome do objeto. As opções disponíveis de métodos depende da classe (ou tipo) do objeto. Vamos explorar alguns métodos relacionados às strings:
"""

# String
info_cliente = "Dino da Silva Sauro gosta de ler livros de ficcao cientifica"

# Metodo find: retorna em qual caracter se inicia a string 'Sauro'
print(info_cliente.find('Sauro')) # 14
print(info_cliente.find('Texto_inexistente')) # -1 (nao contem)

# Metodo replace: substitui uma string por outra
info_cliente.replace('Dino', 'Nome')

# Note que o resultado nao e salvo
print(info_cliente)

# Metodo split: cria uma lista separando cada string
info_cliente.split()

# Metodo upper: todas as letras maiusculas
info_cliente.upper()

# Metodo lower: todas as letras minusculas
info_cliente.lower()

# Metodo strip: retira espacos em branco extra do inicio e final
txt = "     muito espaco branco antes e depois       "
txt.strip()

"""Esses são somente alguns métodos para strings. Existem vários outros.

Em programação, constantemente você deverá consultar ajuda ou manuais. Mais importante do que conhecer todas as funções (você não conseguirá... sempre há novidade neste meio) é saber procurar ou a lógica do que se deseja fazer.

Vamos aprender também sobre alguns métodos relacionados à listas:
"""

# Lista de clientes
clientes = ["Nero", "Atum", "Bois", "Alvares"]

# Metodo append: adiciona elementos ao fim da lista (um de cada vez)
clientes.append("Teatro")
clientes.append("Zinco")
clientes.append("Ameis")

# Note que este metodo ALTERA a lista original
print(clientes)

# Metodo extend: adiciona uma lista ao fim da lista
clientes.extend(["Bete", "Biscoito", "Love"])

# Note que este metodo ALTERA a lista original
print(clientes)

# Metodo insert: adiciona um elemento em uma posicao especifica
# Neste caso na TERCEIRA posicao (indice 2)
clientes.insert(2, "Intruso1")

# Neste caso na OITAVA posicao (indice 7)
clientes.insert(7, "Intruso2")

# Note que este metodo ALTERA a lista original
print(clientes)

# Metodo index: retorna o indice de um elemento pre determinado
print(clientes.index("Intruso1"))
print(clientes.index("Intruso2"))

# Metodo pop: remove um elemento em uma posicao especifica
clientes.pop(2)

# Note que este metodo ALTERA a lista original
print(clientes)

# Metodo remove: remove um elemento pre determinado
clientes.remove("Intruso2")

# Note que este metodo ALTERA a lista original
print(clientes)

# Metodo reverse: inverte a ordem da lista
clientes.reverse()

# Note que este metodo ALTERA a lista original
print(clientes)

# Metodo sort: ordena a lista
clientes.sort()

# Note que este metodo ALTERA a lista original
print(clientes) # Para strings, a ordem e alfabetica

numeros = [2, 5, 1, 3, 4, 8, 10]
print(numeros)

numeros.sort()
print(numeros) # Para numeros, a ordem e crescente

numeros.sort(reverse = True)
print(numeros) # Ou decrescente

# Lista de interesses
interesses = ["Python", "Matematica", "IA", "IA", "Python", "Dados", "IA"]

# Metodo count: retorna a contagem de determinado elemento
print(interesses.count("Python"))
print(interesses.count("IA"))
print(interesses.count("Dados"))

# Metodo clear: limpa a lista
interesses.clear()

# Note que este metodo ALTERA a lista original
print(interesses)

"""Por fim e não menos importante, usualmente, não modificamos a lista original. Em geral, fazemos cópias do mesmo objeto para trabalhar separadamente com cada um deles. Pode ser tentador programar lista1 = lista2. No entanto, isso NÃO deve ser feito pois o Python continua referenciando a lista1. Ou seja, tudo que você faz em lista2 é espalhado em lista1. Como solução, basta utilizar o seguinte método:"""

# Metodo copy: retorna uma copia da lista
clientes_novo = clientes.copy()

# Adicionando um registro na nova lista
clientes_novo.insert(0, "Intruso3")

# Comparando
print(clientes)
print(clientes_novo)

"""Módulos
Certas funcionalidades do Python não são carregadas por padrão. Isso inclui funcionalidades que já vem inclusas como parte da linguagem, bem como funcionalidades de terceiros que você mesmo faz o download. Para usar esses recursos, você precisará importar os módulos que os contêm. Uma abordagem é simplesmente importar o próprio módulo:
"""

# Importando modulo
# (ou carregando biblioteca)
# (ou carregando pacote)
import statistics

print(statistics.mean([1, 2, 3, 4, 5]))

"""Aqui, statistics é o módulo contendo funções e métodos para cálculos estatísticos. Após esse tipo de importação, você deve prefixar essas funções com statistics. para acessá-las.

Por exemplo, se você já tem um statistics em seu código, você pode `apelidar' o módulo da seguinte forma:
"""

import statistics as stats
print(stats.mean([1, 2, 3, 4, 5]))

"""Você também pode fazer isso se o seu módulo tiver um nome complicado ou se for digitá-lo muitas vezes. Por exemplo, uma convenção padrão para manipulação de dados com pandas e visualização de dados com matplotlib é:"""

import pandas as pd
import matplotlib.pyplot as plt

# Exemplos de uso
# pd.read_excel(...)
# plt.plot(...)

"""Se você precisa de funcionalidades específicas de um módulo, poderá importá-las explicitamente e usá-las sem prefixação:"""

from math import ceil

# Exemplos de uso
# (sem necessidade de escrever 'math' antes da funcao 'ceil')
ceil(5.8)

"""Cuidado ao importar todo o conteúdo de um módulo para seu ambiente de trabalho, o que pode substituir inadvertidamente variáveis ou funções que você já definiu:"""

prod = 10

from math import *    # opa, 'math' tem uma funcao que se chama 'prod'
print(prod)           # "<built-in function prod>"